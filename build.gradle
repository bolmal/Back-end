plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // 추가: test -> jacocoTestReport
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports{
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.destination file("$buildDir/reports/jacoco/index.html")
        xml.destination file("$buildDir/reports/jacoco/index.xml")
        csv.destination file("$buildDir/reports/jacoco/index.csv")
    }

    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            // 측정 안하고 싶은 패턴
                    ])
                })
        )
    }
    // 추가: jacocoTestReport -> jacocoTestCoverageVerification
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            // 라인 커버리지 설정
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                /*minimum = 0.70*/
            }

            // 브랜치 커버리지 설정
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                /*minimum = 0.70*/
            }

            excludes = [
            ]
        }
    }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // Sentry Dependencies
    implementation 'io.sentry:sentry-logback:6.26.0'
    implementation 'io.sentry:sentry-spring-boot-starter:6.26.0'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // H2
    testRuntimeOnly 'com.h2database:h2'

    // Spring Boot Mail Starter
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // redis
    implementation 'org.springframework.data:spring-data-redis:2.7.5'
    implementation 'io.lettuce:lettuce-core:6.2.1.RELEASE'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'ognl:ognl:3.3.1'

    // Spring Cloud Starter
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Spring Security OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
}